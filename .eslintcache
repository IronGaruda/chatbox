[{"C:\\Users\\Christoph\\Desktop\\Development\\superchat\\src\\index.js":"1","C:\\Users\\Christoph\\Desktop\\Development\\superchat\\src\\reportWebVitals.js":"2","C:\\Users\\Christoph\\Desktop\\Development\\superchat\\src\\App.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":4230,"mtime":1607730023949,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"dxeufm",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\Users\\Christoph\\Desktop\\Development\\superchat\\src\\index.js",[],["16","17"],"C:\\Users\\Christoph\\Desktop\\Development\\superchat\\src\\reportWebVitals.js",[],"C:\\Users\\Christoph\\Desktop\\Development\\superchat\\src\\App.js",["18","19","20"],"//  --ALL REACT & FIREBASE IMPORTS--\nimport React, { useRef, useState } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/App';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n\n\n//  --LINK PROJECT TO FIREBASE CREDENTIALS --\nfirebase.initializeApp({\n  apiKey: \"AIzaSyAnF0cwLdCQsumFImp2C03KecnkUTie77s\",\n  authDomain: \"chatbox-ee36d.firebaseapp.com\",\n  projectId: \"chatbox-ee36d\",\n  storageBucket: \"chatbox-ee36d.appspot.com\",\n  messagingSenderId: \"991768334821\",\n  appId: \"1:991768334821:web:e85337a1ab67732456df0c\",\n  measurementId: \"G-VG6NR6FTLC\"\n})\n\n//    --FIREBASE LOGIN AUTH AND DATABASE--\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  //  Checks if user is currently signed-in with Google\n  const [user] = useAuthState(auth); \n\n  return (\n\n    //    --HEADER CONTENT--\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <h1>HEADER</h1>\n      <SignOut />\n      </header>\n\n      {/*__If user IS signed-in: show chatroom component,\n      _____If user IS NOT signed-in: SHOW LOGIN BUTTON */}\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n\n    </div>\n  );\n}\n//    --SIGN IN COMPONENT--\nfunction SignIn() {\n  //  Pop-up window for Google sign-in authentication\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    //  Sign-in button\n    <button class=\"sign-in\" onClick={signInWithGoogle}>Sign In With Google</button>\n  )\n}\n\n//    --SIGN-OUT COMPONENT--\nfunction SignOut() {\n\n  //  If user is signed-in, then display sign-out button component\n  return auth.currentUser && (\n\n    <button class=\"sign-out\" onClick={() => auth.signOut()}> Sign Out</button>\n  )\n}\n\n//    --CHAT ROOM COMPONENT--\nfunction ChatRoom() {\n\n  const dummy = useRef()\n  \n  //  Retrieves last 25 messages from the 'messages' collection and then sorts\n  //  them according to 'createdAt' field (chronologically)\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  //  Takes the ordered messages in messageRef and deconstructs them\n  //  into an individual message property\n  const [messages] = useCollectionData(query, {idField: 'id'});\n\n  const [ formValue, setFormValue ] = useState('');\n  \n  //    --SEND MESSAGE FUNCTION/COMPONENT--\n  const sendMessage = async(e) => {\n\n    e.preventDefault();\n\n    //  Deconstructs the currentUser object (logged-in user) and retrieves \n    //  the uid and photoURL\n    const { uid, photoURL } = auth.currentUser;\n\n    // Adds the message reference as a document to the messages collection in database\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n\n    });\n\n    //  Resets the formValue back to empty\n    setFormValue('');\n\n    //  Uses the dummy const as a reference to scroll page back down when\n    //  a new message is sent  \n    dummy.current.scrollIntoView({ behavior: 'smooth'});\n    \n  }\n\n  return (\n    <>\n      {/* This is where the sent messages are displayed */}\n      <main>\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n        <div ref={dummy}></div>\n\n      </main>\n\n\n      {/*   --MESSAGE ENTRY BOX AND SUMBISSION BUTTON--    */}\n      <form onSubmit={sendMessage}>\n\n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)} />\n\n       <button type=\"submit\">submit message</button>\n      </form>\n    </>\n  )\n}\n\nfunction ChatMessage(props) {\n\n  //  Deconstruct the props.message object into three properties\n  const {text, uid, photoURL} = props.message;\n\n  //  Validates the user that the message was sent from\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : \"received\";\n\n  return (\n    // How the validated message returns back to the chatbox, to be displayed\n    <div className={'message ${messageClass}'}>\n      <img src={photoURL} />\n      <p>{text}</p>\n    </div>\n  )\n}\n\nexport default App;\n",{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":147,"column":9,"nodeType":"27","messageId":"28","endLine":147,"endColumn":21},{"ruleId":"29","severity":1,"message":"30","line":151,"column":21,"nodeType":"31","messageId":"32","endLine":151,"endColumn":46},{"ruleId":"33","severity":1,"message":"34","line":152,"column":7,"nodeType":"35","endLine":152,"endColumn":29},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'messageClass' is assigned a value but never used.","Identifier","unusedVar","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]